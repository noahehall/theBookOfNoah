# -*- mode: ruby -*-
# vi: set ft=ruby :

# this file contains reference of all available configuration settings
# ^ with my opinionated defaults

# @see https://docs.vagrantup.com
# @see boxes at https://vagrantcloud.com/search

ENV["LC_ALL"] = "en_US.UTF-8"
Vagrant.require_version ">= 2.2"

# Vagrant.configure("2") do |config|
  # box settings --------------------------------------------------------------

  # base box
  # config.vm.box = "orgName/boxName"

  # if you need to force a version of the config.vm.box
  # config.vm.box_version = "1.0.282"

  # if not sourcing from vagrant cloud
  # config.vm.box_url = "https://some/other/repo"

  # check for box updates on start
  # config.vm.box_check_update = true

  # sync folders -------------------------------------------------------------
  # host path is relative to the Vagrantfile

  # disable defualt shared dir
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # normally works
  # config.vm.synced_folder "../host", "/absolute/path/on/guest",

  # extra settings for docker
  # config.vm.synced_folder "../host/dir1", "/guest/dir1", docker_consistency: "cached"
  # config.vm.synced_folder "../host/dir2", "/guest/dir2", docker_consistency: "delegated"

  # provision scripts ----------------------------------------------------------
  # run scripts when the box starts the first/every time
  # via shell, Ansible, Chef, Docker, Puppet and Salt
  # @see https://www.vagrantup.com/docs/provisioning
  # @see https://stackoverflow.com/questions/22643177/ssh-onto-vagrant-box-with-different-username

  # inline provision script
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get upgrade -y
  # SHELL

  # external provision script
  # ^ Path is relative to the project Vagrantfile or a url
  # config.vm.provision "shell", path: "./provision.sh"
  # run provision scripts on every boot
  # config.vm.provision "shell", path: "./provision.sh", run: "always"

  # upload file from host to guest
  # config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"

  # upload dir & all children from host to guest
  # config.vm.provision "file", source: "~/path/to/host/folder", destination: "$HOME/remote/newfolder"

  # upload all files in dir (but not dir) from host to guest
  # config.vm.provision "file", source: "/otherfolder", destination: "/remote/otherlocation"

  # docker provisioner
  # install docker, pull containres, configure containers to run on boot
  # @see https://www.vagrantup.com/docs/provisioning/docker
  # config.vm.provision "docker" do |d|
  #   images: ["ubuntu", "vagrant"]
  #   d.build_image "/vagrant/app",
  #     args "-t poop:latest"
  #   d.run "someImage",
  #     cmd: "bash -l",
  #     args: "-v '/vagrant:/var/www'",
  #     auto_assign_name: true,
  #     daemonize: true, # run in background via -d
  #     restart: 'always' # restart on every boot
  #   # also run multiple dbs by setting name to db-1 & db-2
  #   d.run "db-1", image: "user/mysql"
  #   d.run "db-2", image: "user/mysql"
  #   # customize /etc/default/docker
  #   d.post_install_provision "shell",
  #     inline:"echo export http_proxy='http://127.0.0.1:3128/' >> /etc/default/docker"

  # end
  # network settings -----------------------------------------------------------

  # public network
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # public network, private access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # private network
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # virtualbox provider --------------------------------------------------------
  # todo: move to virtualbox.vagrantfile
  # @see https://www.vagrantup.com/docs/providers/virtualbox
  # @see @see https://phoenixnap.com/kb/how-to-install-a-gui-on-ubuntu

  # config.vm.provider "virtualbox" do |vb|
    # disable gui for headless mode
    # vb.gui = false
    # vb.name = "use a specific name instead of folder name + timestamp"
    # vb.linked_clone = true # clone the basebox, dont import for better perf
    # vb.check_guest_additions = true # disable to speed up provisioning

    # Customize via shortcuts, dont use these so we can group them below
    # vb.memory = "1024" in MB
    # vb.cpus = 2

    # @see https://www.virtualbox.org/manual/ch08.html
    # ^ call any command against VBoxManage just prior to booting the machine
    # ^ are executed in order
    # vb.customize ["modifyvm", :id, "--cableconnected1", "on"] # usb
    # vb.customize ["modifyvm", :id, "--clipboardmode", "bidirectional"]
    # vb.customize ["modifyvm", :id, "--cpuexecutioncap", "50"] # cpu cap
    # vb.customize ["modifyvm", :id, "--cpus", "2"] # cores
    # vb.customize ["modifyvm", :id, "--memory", "2048"] # in MB
    # vb.customize ["modifyvm", :id, "--mousemode", "host"] # mouse
    # vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"] # dns
    # vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"] # dns proxy
    # vb.customize ["modifyvm", :id, "--rtcuseutc", "on"] # host machine's clock
    # vb.customize ["modifyvm", :id, "--vram", "16"] # video memory
  # end

  # docker provider ---- -------------------------------------------------------
  # i.e. vagrant up --provider docker
  # ^ If the system cannot run Linux containers natively,
  # ^ Vagrant automatically spins up a "host VM" to run Docker.
  # todo: move to docker.vagrantfile

  # config.vm.provider "docker" do |d|
    # d.image = "foo/bar"

    # optinally specify a host VM to run the container in
    # not required if the host already has docker installed
    # d.vagrant_vagrantfile = "../path/to/Vagrantfile"
  # end

  # k8ts + ansible -------------------------------------------------------------
  # @see https://kubernetes.io/blog/2019/03/15/kubernetes-setup-using-ansible-and-vagrant/

# end
